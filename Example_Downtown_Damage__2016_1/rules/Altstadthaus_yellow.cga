/**
 * Author:  Christian
 */

version "2013.1"

###########################################
#
#			ASSETS
#
###########################################

@Group("Damage") @Range(0,1)
attr damage = 0.5

###NEUE ASSETS###
const win=
	"tiles/yellow/window1.obj"

windmg=
	50% : "tiles/yellow/window2.obj"
	else : "tiles/yellow/window3.obj"

win1 = 
	case p(damage) : windmg
	else : win

	
const wallTex = fileRandom("assets/wall/wall*.jpg")

	
const pillar=
	50% :  "pillar/pillar_round1.obj"
	else : "pillar/saeule_ornate.obj"

const wall1 = "tiles/yellow/wall.obj"

wall = 
	case p(damage) : 
		33% : "tiles/yellow/wall_dmg.obj"
		33% : "tiles/yellow/wall_hole1.obj"
		else : "tiles/yellow/wall_hole2.obj"
	else : wall1
	
const pillar2="pillar/saeule_ornate2.obj"
const door="tiles/yellow/door.obj"



###########################################
#
#			ATTRIBUTE
#
###########################################

#Gebäudehöhen
@Group("Building") @Range(14,26)
attr buildingHeight = rand(14,26)
@Group("Building") @Range(2.5,4.5)
attr floorheight = 3.5
@Group("Building") @Range(3.5,6)
attr firstFloorheight=5
@Group("Building") @Range(2.5,5.5)
attr tilespacing=4.5
#Fenster

const windowspacing=5
#Dach

####
@Group("Building") @Range(0,2)
attr Balkenbreite=1.2
@Group("Building") @Range(0,1)
attr ledgeHeight=0.3


##########################################

LotInner -->
	Lot

const adaptMass = scope.sx > 10 && scope.sz > 10
Lot-->
	case  adaptMass : mirrorScope(p(0.5), false,false) shapeL(10,10){shape : Footprint | remainder : GroundFilled}
	else : Footprint
 
Footprint--> 
	case geometry.area < 20 : Ground
	else : 

	Ground
	offset(-1, inside)
   	extrude(buildingHeight) 
	setupProjection(0, scope.xy, 5, 5,-1)
	comp(f){side : Facade | top : Roof}





		
Facade--> split(y){
				firstFloorheight : Erdgeschoss
				| ledgeHeight: CreateLedge(0)
				| ~1 : ObereStockwerke(1)
				| ledgeHeight: CreateLedge(1)
				| 3: ObereStockwerke(2)
				| ledgeHeight: CreateLedge(1)
				}
				
Erdgeschoss-->split(x){
					//Balkenbreite/2: Balken
					{~tilespacing: Tile(0,split.index)}*
					|Balkenbreite: Balken(0)
				 }
				
//1-> mittlere Fenster, 2-> obere Fenster
ObereStockwerke(top)-->
	case scope.sx < 4 : Balken(1) 
	else :	split(x){
				//Balkenbreite: Balken(1) |
				{~tilespacing: Tile(top,0)}*
				|Balkenbreite: Balken(1)
			 }

//Topfloor=0 -> erdgeschoss, 1->mitte, 2-> ganz oben
Tile(topfloor,index)-->

case topfloor==1:
			split(x){

					Balkenbreite: Balken(1) |
					{~windowspacing : Fensterreihe}*
					//| {Balkenbreite/2: Balken}

				 }
				 
//Setzt kleine Fenster ganz oben
case topfloor==2:
				split(x){

					{ Balkenbreite: Balken(1) |
					 ~windowspacing : Fenster}*
					//| {Balkenbreite/2: Balken}

				 }


else:		split(x){

					Balkenbreite: Balken(0)
					| {~tilespacing : Bodenreihe(index)}*
					//| {Balkenbreite/2: Balken}

				 }

const ledge = "pillar/ledge.obj"
				 
CreateLedge(topLedge)--> case topLedge==1: s('1.5, '1, 0.4) center(x) i(ledge) 
						 else:  s('1.5, '1, 0.8) center(x) i(ledge) 






Fensterreihe-->split(y){ 

	{~floorheight : FloorSplit(3)}*
}

idx = 25% : 0 25% : 2  25% : 5 else : 7

Bodenreihe(index)-->case index==2:  s('1,'1,0)  i(door) t(0,0,'-1) t(0,0,0.2)
					case index%2==0 && index!=3: s('1,'1,0) i(win1) t(0,0,'-1) t(0,0,0.3)
					else:s('1,'1,0.5) setPivot(xyz,idx) i(wall) reverseNormals t(0,0,-0.025)
					
					
//Baut fenster ein
Fenster-->s('1,'1,0)  i(win1) t(0,0,'-1) t(0,0,0.3) 

//Zwischenbalken der Fenster
Balken(topfloor)-->  
//case inside(): NIL
// else:
  case topfloor==1: s('1, '1, 0.2) i(pillar)
  case topfloor==0 :  s('1, '1, 0.5) i(pillar2)
  else:NIL










#splittet die Stockwerke für die Fenster auf
FloorSplit(floorindex) -->
							case floorindex == 3 : split(x){~tilespacing : Fenster}* 
							else: NIL
						


import cy : "courtyard.cga"

Ground --> cy.FloorTexture
GroundFilled --> cy.LotInner
	
	
### Roof
# gable1, gable2wExt, hip, dormer

@Range("gable1","gable2","hip1","hip2")
attr roofStyle = 25% : "gable1" 25% : "gable2" 25% : "hip1" else : "hip2"


import roof : "roof.cga"

Roof--> offset(0.4, inside) roof.Roof

roof.WindowTile --> i(win)

roof.Wall --> Wall

Wall -->
	projectUV(0)
	texture(wallTex)
	#color("#ff9999")
