/**
 * File:    HouseWhite.cga
 * Created: 11 Jan 2010 14:11:22 GMT
 * Author:  christianholzer
 */

version "2013.1"

import roof : "roof.cga"
###########################################
#
#			ASSETS
#
###########################################

const tex="houseWhite/haus1k.jpg"


const win3="houseWhite/fenster1.obj"
const sauele="houseWhite/pillar1.obj"
const qBalken="houseWhite/qbalken.obj"
const wand="houseWhite/wand.obj"


const door="houseWhite/tuer.obj"



//loch in der wand
const loch="houseWhite/loch_gr.obj"

const bruchB="houseWhite/brackBruch.obj"

const bruch="houseWhite/bruch.obj"
const bruchF="houseWhite/frontBruch.obj"

const dachgeschoss="houseWhite/dachgeschoss.obj"

const facadeMap = "houseWhite/plaster.jpg"

const wallTex = fileRandom("assets/wall/wall*.jpg")

###########################################
#
#			ATTRIBUTE
#
###########################################

@Range(16,30)
attr buildingHeight = rand(16,30)
@Range(4,6)
attr floorheight = 4.5
@Range(4,6)
attr firstFloorheight=4.5
@Range(4,6)
attr tilespacing=6.5

@Range(4,6)
attr lowpoly=false
@Range(4,6)
attr lowpolyNr=4
@Range(4,6)
attr doorVal=2

####
@Range(4,6)
attr Balkenbreite=.9
@Range(4,6)
attr ledge=1


const orientation = 
	case scope.sx > scope.sz : 0
	else : 1


##########################################

LotInner -->
	Lot
 
Lot-->
 	altstadthaus.smoke.Smoke 
 	GroundFilled
 	innerRect alignScopeToGeometry(yUp, 0,orientation)
 	extrude(buildingHeight)Build
 
Build-->
 50%:comp(f){front : Facade | back: FacadeB | right: Rechts| left: Links|top : offset(0.4,inside) Roof} 
 50%:comp(f){front : FacadeB | back: Facade | right: Links| left: Rechts|top : offset(0.4,inside) Roof}
 else:nix.
 
Rechts-->split(y){
				firstFloorheight : Erdgeschoss
				| {ledge: CreateLedge(0)}
				| {~100 : Bruch}*
				| {ledge: CreateLedge(1)}
				
				}

####
Bruch-->set(trim.vertical, false) s('1,'1, 15) t(0,0,-15) i(bruch) 
		
BruchFront-->s('1,'1, 1) t(0,0,-0.6) i(bruchF)
BruchBack-->s('1,'1, 1)t(0,0,-0.6)i(bruchB)
	
Links-->FacadeL		
		
@Range("gable1","gable2","hip1","hip2")
attr roofStyle = 25% : "gable1" 25% : "gable2" 25% : "hip1" else : "hip2"

Roof-->
	50%:
		i(dachgeschoss) s('1,'1,'0.75)//roof(gable, 25, 0)
	
	else:
		roof.Roof
		#roofGable(25, 1, 1) comp(f){left: Fronttex | front: Fronttex| back
		#: Fronttex|right: Fronttex |top: Rooftex}

Fronttex-->	setupProjection(0, scope.xy,75, 55, 1)

			set(material.colormap, tex)  
			projectUV(0)
			

Facade--> split(y){
				firstFloorheight : Erdgeschoss
				| {ledge: CreateLedge(0)}
				| {~1000 : ObereStockwerke(1)}
				| {ledge: CreateLedge(1)}
				
				}

FacadeB--> split(y){
				firstFloorheight : Erdgeschoss
				| {ledge: CreateLedge(0)}
				| {~1000 : ObereStockwerkeB(1)}
				//| {ledge: CreateLedge(1)}
				//| {3: ObereStockwerkeB(2)}
				| {ledge: CreateLedge(1)}
				
				}
		
FacadeL--> split(y){
				firstFloorheight : Erdgeschoss
				| {ledge: CreateLedge(0)}
				| {~1000 : ObereStockwerkeL(1)}
			//	| {ledge: CreateLedge(1)}
			//	| {3: ObereStockwerke(2)}
				| {ledge: CreateLedge(1)}
				
				}
				
ObereStockwerkeL(top)-->split(x){
					//Balkenbreite/2: Balken
					{~tilespacing: XSplitter(top,split.index,100000)}*
					|Balkenbreite: Balken(top)
				 }
				
Erdgeschoss-->split(x){
					//Balkenbreite/2: Balken
					{~tilespacing: XSplitter(0,split.index,split.total)}*
					|Balkenbreite: Balken(0)
				 }
				
//1-> mittlere Fenster, 2-> obere Fenster
ObereStockwerke(top)-->split(x){
					//Balkenbreite/2: Balken
					{~tilespacing: XSplitter(top,split.index,split.total)}*
				//	|Balkenbreite: Balken(top)
				 }
				 
ObereStockwerkeB(top)-->split(x){
					//Balkenbreite/2: Balken
					{~tilespacing: XSplitterB(top,split.index,split.total)}*
					|Balkenbreite: Balken(top)
				 }

//Topfloor=0 -> erdgeschoss, 1->mitte, 2-> ganz oben
XSplitter(topfloor,index,total)-->

case topfloor==1:
			split(x){

					Balkenbreite: Balken(1)
					| {~tilespacing : Fensterreihe(index,total)}*
					//| {Balkenbreite/2: Balken}

				 }
				 
//Setzt kleine Fenster ganz oben
case topfloor==2:
				split(x){

					Balkenbreite: Balken(2)
					| {~tilespacing : FensterSmall(index,total)}*
					//| {Balkenbreite/2: Balken}

				 }



else:		split(x){

					Balkenbreite: Balken(0)
					| {~tilespacing : Bodenreihe(index)}*
					//| {Balkenbreite/2: Balken}

				 }
				 
XSplitterB(topfloor,index,total)-->

case topfloor==1 && index!=0:
			split(x){

					Balkenbreite: Balken(1)
				 |{~tilespacing : FensterreiheB(index,total)}*
					//| {Balkenbreite/2: Balken}

				 }

case topfloor==1 && index==0:
			split(x){

					//Balkenbreite: Balken(1)
				 {~tilespacing : FensterreiheB(index,total)}*
					//| {Balkenbreite/2: Balken}

				 }
				 
//Setzt kleine Fenster ganz oben
case topfloor==2:
				split(x){

					Balkenbreite: Balken(2)
					| {~tilespacing : FensterSmall(index,total)}*
					//| {Balkenbreite/2: Balken}

				 }


else:		split(x){

					Balkenbreite: Balken(0)
					| {~tilespacing : Bodenreihe(index)}*
					//| {Balkenbreite/2: Balken}

				 }
				 
CreateLedge(topLedge)--> case topLedge==1: s('1.1, 1, 0.4) center(x) i(qBalken) deleteBackface
						 else:  s('1.1, 1, 0.8) center(x) i(qBalken) deleteBackface


deleteBackface-->  comp(f){top: X| front: X|
      back:   NIL | side:   NIL |bottom: X } 

#####
Fensterreihe(index,total)-->

case index!=total-1:
					90%:
						split(y){ {~floorheight : FloorSplit(3,index)}*}
					else: 
						i(loch) t(-0.20,-0.5,-7.7) s('1.05,'rand(0.95,1.05), 8)
else: BruchFront

FensterreiheB(index,total)-->
case index!=0:
					90%:
						split(y){ {~floorheight : FloorSplit(3,index)}*}
					else: 
						i(loch) t(-0.20,-0.5,-7.7) s('1.05,'1.05, 8)
else: BruchBack


Bodenreihe(index)-->case index % doorVal ==0:  
						s('1,'1,0.5)  i(door) t(0,0,-0.225)
					case index%lowpolyNr==0 && index!=3 && lowpoly: 
						s('1,'1,0.5)  i(wand) t(0,0,-0.225)
					else:
						s('1,'1,0.5)  i(win3) t(0,0,-0.225)
					
					

Ground --> altstadthaus.cy.FloorTexture
GroundFilled --> altstadthaus.cy.LotInner


Balken(topfloor)-->  
  case topfloor==1: 

  		s('1, '1, 0.4) i(sauele)

  case topfloor==0 :  s('1, '1, 0.8) primitiveCube() t(0,0,-0.5) Fronttex
  else:NIL

FloorSplit(floorindex,index) -->
	setupProjection(0, scope.xy, 20, 20)
	projectUV(0)
	offsetUV(0, rand(1), rand(1))
	texture(facadeMap)
	altstadthaus.WindowOrHole

import altstadthaus : "Altstadthaus_damage.cga"	



roof.WindowTile --> altstadthaus.WindowOrHole

roof.Wall --> Wall

Wall -->
	projectUV(0)
	texture(wallTex)

	