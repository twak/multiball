/**
 * File:    muli.cga
 * Created: 19 Aug 2019 21:15:58 GMT
 * Author:  twak
 */

version "2019.0"

import paris : "/Example_Paris__2019_0/rules/paris.cga" ( High_LoD = true )
import med : "/Example_Medieval_City__2016_1/rules/medievalCity.cga"
import pomp : "/Example_Pompeii__2019_0/rules/pompeii.cga"

import streets : "/Example_Complete_Streets__2016_0/rules/Streets_Complete/Complete_Street.cga"
import damBraunes : "/Example_Downtown_Damage__2016_1/rules/BraunesAltesHaus.cga"
import damStadt : "/Example_Downtown_Damage__2016_1/rules/Altstadthaus.cga"
import damPark : "/Example_Downtown_Damage__2016_1/rules/Park.cga"

import desert : "/Example_Desert_City__2019_0/rules/Desert_City_Buildings.cga" (Level_of_Detail="high")
import football : "/Example_Desert_City__2019_0/rules/Desert_City_Soccerfield.cga"

@Hidden @Order(1) @Range(0,30)
attr streetWidth 				= geometry.dv(0,unitSpace)				# REALWORLD-distance in V-direction corresponds to width of street (in case the geometry does not contain rounded entry geometry)
@Hidden @Order(3) @Range(1,6)
attr laneWidth 					= geometry.dv(0,unitSpace) # note that TEXTURE-distance in V-direction corresponds to number of lanes (as generated by CityEngine)
@Hidden 
streetOffset = 0
@Hidden @Order(5)@Description("For internal use and reporting, must be set to 'Source=Object'.")
attr connectionEnd 				= "STREET"		# built in value attributes, needs to be sourced as Object (parent)
@Hidden @Order(6)@Description("For internal use and reporting, must be set to 'Source=Object'.")
attr connectionStart 			= "STREET"		# built in value attributes, needs to be sourced as Object (parent)
@Hidden @Order(7)@Description("For internal use and rep_getInitialCrosswalk(connectionStart)orting, must be set to 'Source=Object'.")
attr valency 					= 0
@Hidden @Order(8)@Description("For internal use and reporting, must be set to 'Source=Object'.")//If these two do not connect, crosswalks with have no default width-they must be connected. 
attr sidewalkWidthLeft			= rint(geometry.dv(0,unitSpace))
@Hidden @Order(9)@Description("For internal use and reporting, must be set to 'Source=Object'.")//If these two do not connect, crosswalks with have no default width-they must be connected. 
attr sidewalkWidthRight			= rint(geometry.dv(0,unitSpace))
@Hidden @Order(10) @Description("For internal use and reporting, must be set to 'Source=Object'.")
attr SidewalkWidth				= 0
@Hidden @Order(11) @Description("For internal use and reporting, must be set to 'Source=Object'.")
attr SidewalkLength				= 0
@Order(12) @Hidden @Description("For internal use and reporting, must be set to 'Source=Object'.")
attr sidewalkSide				= "Error"
@Order(14) @Hidden @Description("For internal use and reporting, must be set to 'Source=Object'.")
attr elevation = 0                # built in value attributes, needs to be sourced as Object (parent)

@Startrule
Lot -->
#  	set(paris.High_LoD, true)
 	set(paris.Height, rand() * 20 + 3)
 	set(desert.Building_Height, rand() * 20 + 3)
#  	set(desert.Level_of_Detail, "high")
#  	set(paris.Parisian_Roof.Level_of_Detail, "high") too high...
#  	set(paris.ShowTrees, "Realistic")
#  	set(pomp.LevelOfDetail, "High")
#  	set(pomp.Plant.Representation, "Realistic")
 	
	Setback ()
	
LotInner --> 
  case p(0.2) : damPark.LotInner
  case p(0.3) : football.SoccerField
  case p(0.2) : paris.LotInner
  else        : pomp.Ground

setback() = case p(0.5): 0 else: rand() * 3

dists = comp(fe) { inside = 0   |
                   front  : case p(0.3): 0 else: rand() * 4+2
                   }

Setback() -->
	setback(dists) { front : Sidewalk |
	remainder : t(0,-0.2,0) Go(rand() * 100) }

Go (f) -->
	case geometry.area < 9:
		med.Lot
 	case f <= 15:
 		pomp.Lot
 	case f < 25:
		damBraunes.Lot
 	case f < 35: 		damStadt.Lot
 	case f < 10:
 		paris.PrivateYard
 	case f < 60:
 		desert.Footprint
	else:
		paris.Lot
		
const streetWidth4Med = 5

#https://doc.arcgis.com/en/cityengine/latest/help/help-street-and-crossing-shapes.htm
Street --> S1
Junction --> S1
Joint --> S1
Crossing --> S1
Freeway --> S1
FreewayEntry --> S1
Roundabout --> S1
RoundaboutIsland --> S1
  	
S1 -->
	set(streets.vehiclesProb, rand() * 0.2 + 0.1)
	set(streets.busProb, rand() * 0.001 )
	set(streets.Stop_Begin, "arrows on all lanes" )
	set(streets.Stop_End, "arrows on all lanes" )
	set(streets.Centerline_Color, "white" )
	set(streets._crosswalkBeginWidth, case p(0.2) : 2 else: 0 )
	set(streets._crosswalkEndWidth, case p(0.2) : 2 else: 0 )
	set(streets.Traffic_Lights, case p(1): "Both" else: "None"  )
	set(med.highLOD, true)
 	S2
 	
S2 -->
	case streetWidth < streetWidth4Med && p (0.5): med.Street
	case initialShape.startRule == "Street":
		streets.Street
	case initialShape.startRule == "Junction":
		streets.Junction
	case initialShape.startRule == "Joint":
		streets.Joint
	case initialShape.startRule == "Crossing":
		streets.Crossing
	case initialShape.startRule == "Freeway":
		streets.Freeway		
	case initialShape.startRule == "FreewayEntry":
		streets.FreewayEntry
	case initialShape.startRule == "Roundabout":
		streets.Roundabout				
	case initialShape.startRule == "RoundaboutIsland":
		streets.RoundaboutIsland		
	else:	
		streets.Street

#debugRandomTree =
	 


Sidewalk -->

    set(streets.Sidewalk_Tree_1_Type, listRandom ( "Alder Buckthorn;Amazon Sword Plant;American Chestnut;American Sycamore;Apricot;Australian Pine;Baldcypress;Balsam Fir;Bamboo;Banana Tree;Basswood;Bay Laurel;Black Locust;Blue Gum Eucalyptus;Boxwood;Cabbage Palm Fern;California Bay;California Incense Cedar;California Palm;California Redwood;California Walnut;Coconut Palm;Common Hawthorn;Common Whitebeam;Conker Tree;Date Palm;Desert Willow;Douglas Fir;European Beech;European Larch;Ficus;Field Elm;Flannelbush;Flowering Dogwood;Giant Sequoia;Hedgehog Agave;Japanese Angelica Tree;Lacy Tree Philodendron;Leyland Cypress;Lily Of The Valley;Lodgepole Pine;Mediterranean Buckthorn;Mexican Palmetto;Mountain Mahogany;Northern Red Oak;Norway Maple;Norway Spruce;Orange Tree;Orchid;Oval Leaved Privet;Palm Lily;Palo Verde;Paper Birch;Parlour Palm;Prickly Pear Cactus;Red Alder;Red Hickory;Rhododendron Azaleas;Rose;Ruffle Palm;Saguaro Cactus;Sassafras;Scots Pine;Sea Islands Yucca;Shadbush;Snake Plant;Southern Magnolia;Spanish Broom;Strawberry Tree;Sugar Maple;Sunflower;Sweetgum;Umbrella Acacia;Western Juniper;White Ash;White Oak;White Poplar;White Willow;Witch Hazel" ))
	set(med.highLOD, true)
	set(streets.People_Percentage, rand()  )
	set(streets.Sidewalk_Street_Lamps, case p(0.4): "Both" else: "None"  )
	set(streets.Sidewalk_Street_Lamp_Spacing, rand() * 15 + 5  )
	set(streets.Traffic_Lights, case p(1): "Both" else: "None"  )
	set(streets.Sidewalk_Ground_Cover, case p(0.4): "Random" else: "None"  )
	set(streets.Sidewalk_Benches, case p(0.1): "Both" else: "None"  )
	set(streets.Sidewalk_Planting_Spacing , rand() * 30 + 5  )
	SW2
	
	
SW2 -->case streetWidth < streetWidth4Med && p (0.5): med.Sidewalk
	else:  streets.Sidewalk
