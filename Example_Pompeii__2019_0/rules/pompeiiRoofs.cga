/**
 * File:    pompeiiRoofs.cga
 * Created: 3 Nov 2008
 * Updated: 6 Dec 2018
 * Author:  Esri R+D Center Zurich
 */



version "2019.0"



####################################################
# Control Attributes
#

@Order(1) @Enum("High","Low")
attr LevelOfDetail = "Low"

@Order(2) @Enum("hip","gable","shed","flat")  
attr RoofForm = 
	case geometry.area < 20: 
		case geometry.isRectangular(15): 20%: "hip" 30%: "gable" 30%: "shed" else: "flat"
		else                           : 20%: "hip" 10%: "gable" else: "flat"
	case geometry.area < 50 : 
		case geometry.isRectangular(20): 40%: "hip" 50%: "gable" else: "flat"
		else                           : 60%: "hip" 30%: "gable" else: "flat"
	else : 
		case geometry.isRectangular(20): 50%: "hip" else: "gable"
		else                           : 80%: "hip" else: "gable"

@Order(3) @Range(min=15, max=30, stepsize=0.5) @Angle
attr RoofAngle = rand(18,23)

@Order(4) @Range(min=0, max=0.5, stepsize=0.1) @Distance
attr Overhang = 60%: rand(0.05,0.4) else: 0

@Order(5)
attr GenerateBricks = false



####################################################
# Roof Construction Constants
#

const roofBrickWidth 	= rand(0.6,0.8)
const roofBrickLength 	= rand(0.9,1.1)

const rafterDistance 	= 50%: roofBrickWidth*2-rafterWidth else: roofBrickWidth-rafterWidth
const rafterWidth 		= 0.15
const rafterHeight 		= 0.27

const battenWidth 		= 0.1
const battenHeight 		= 0.03
const beamTexIdx 		= ceil(rand(5))

const ridgeboardWidth 	= 0.17



####################################################
# Asset Management
#

# textures
const plasterTexture 	= fileRandom("assets/general/stonework/StoneBlock.*.c.jpg")
const doorBeamTex 		= fileRandom("assets/general/woodwork/DoorBeam.*.jpg")
const flatroofTex 		= case !geometry.isRectangular(5): "roofs/flatroofs/flatroof2.jpg"
						  else: 25% : "roofs/flatroofs/flatroof0.jpg"
								25% : "roofs/flatroofs/flatroof1.jpg"
								25% : "roofs/flatroofs/flatroof3.jpg"
								else: "roofs/flatroofs/flatroof4.jpg"
const slopedroofTex 	= fileRandom("assets/roofs/roof*.jpg")
woodTex(inst,orient) 	= "general/woodwork/wood.c.0"+inst+"."+orient+".jpg"

# geometry assets
const roundbrickObj 	= "roofs/roofcovering/roofcovering_round-brick.obj"
const bottombrickObj 	= "roofs/roofcovering/roofcovering_bottom-brick.obj"
const trianglebrickObj 	= "roofs/roofcovering/roofcovering_triangle-brick.obj"
const quadXYObj 		= "general/primitives/quadXY.obj"



####################################################
# Helpers
#

const highLOD = LevelOfDetail == "High"
const irregularityProb = 0.6
const irregularityScale = rand(3)
irr1(v) = case p(irregularityProb): rand(v)*irregularityScale else: 0
irr2(v) = case p(irregularityProb): rand(-v*0.5,v*0.5)*irregularityScale else: 0

nBricksCols 	= rint(scope.sx/roofBrickWidth)	
realBrickWidth 	= scope.sx/nBricksCols
nBricksRow 		= rint(scope.sy/roofBrickLength)





###################################################
###################################################
##
##  RULES
##
##

@StartRule
Generate --> 
	case RoofForm =="hip"     : roofHip(RoofAngle,Overhang,geometry.isRectangular(20)) RoofMass 
	case RoofForm =="gable"   : roofGable(RoofAngle,Overhang,Overhang/2,geometry.isRectangular(20)) RoofMass 
	case RoofForm =="shed"    : roofShed(RoofAngle) RoofMass 
	case RoofForm =="pyramid" : roofPyramid(RoofAngle) RoofMass 
	case RoofForm =="atrium"  : AtriumRoof(0)
	else : FlatRoof

RoofMass -->
	Roof
	comp(f){vertical : Pediment(RoofForm)}

AtriumRoof(shedIndex) -->
	roofShed(RoofAngle,shedIndex) RoofShed(0.03,0.03)
	comp(f){vertical : AtriumPediment(RoofAngle)}

FlatRoof -->
	30% : FlatRoofTex extrude(rand(0.1,0.2)) comp(f){side: Ledge }
	else: FlatRoofTex extrude(rand(0.1,0.2)) comp(f){side: FlatRoofBeam }

FlatRoofBeam -->
	s(scope.sx+1,'1,0.3) t(0,0,'-0.9) center(x) primitiveCube() texture(doorBeamTex)



###################################
# Main Rules	
#	

Roof --> 
	case RoofForm != "shed": 
		set(trim.horizontal,true)
		comp(f){ bottom: NIL | vertical : NIL | all: RoofPlane }
		comp(e){ ridge: rotateScope(case RoofForm=="Hip": RoofAngle else: 0,0,0) Ridge(0) | valley: Ridge(ridgeboardWidth*0.6) | hip: Ridge(ridgeboardWidth*0.6) }  
	else:
		RoofShed(Overhang,Overhang*2)

RoofShed(overhangX,overhangY) -->
	set(trim.horizontal,false) set(trim.vertical,false)
	comp(f){ bottom: NIL | vertical : NIL 
		   | all: s(scope.sx+overhangX,scope.sy+overhangY,'1) center(xy) RoofPlane }
	
RoofPlane -->
	Rafters Battens RoofCovering 	

Ridge(offsetX) -->
	RidgeBoard(offsetX) RidgeBricks		


	
###################################
# Woodwork	
#	
	
Rafters -->
	case highLOD && Overhang > 0.01: 
		translate(rel,world,0,-rafterHeight,0) 
		split(x){ rafterWidth*0.5: NIL 
				| { ~rafterDistance: NIL | rafterWidth: Rafter }* 
				| ~rafterDistance: NIL 
				| rafterWidth*0.5: NIL }
	else: 
		NIL
	
Rafter -->
	case GenerateBricks:
		extrude(world.up,rafterHeight-battenHeight) Wood("v")
	else:
		extrude(world.up,rafterHeight) Wood("v")
	
Battens -->
	Battens(scope.sy/nBricksRow-battenWidth)
	
Battens(battenDistance) -->
	case highLOD && Overhang > 0.01: 
		split(y){ battenWidth: Batten | battenDistance: NIL }*
	else : NIL

Batten -->
	case highLOD:
		translate(rel,world,0,-battenHeight*1.1,0)
		t(0,0.02,0) extrude(battenHeight) Wood("h")
	else:
		NIL
	
RidgeBoard(offsetX) -->
	case highLOD && Overhang > 0.01: 
		translate(rel,world,0,-rafterHeight*1.15,0)
		t(offsetX,0,0)
		s(scope.sx-offsetX,ridgeboardWidth,rafterHeight) center(y) 
		i(quadXYObj) s('1,'1,0)
		extrude(world.up,rafterHeight) 
		Wood("l")
	else: NIL
	
Wood(orient) -->
	case orient == "l":
		setupProjection(0, scope.yz, 1,1,scope.sx/scope.sz) projectUV(0) 
		texture(woodTex(beamTexIdx,"h")) translateUV(0,0,-0.02)			# trial and error texturing here
	case orient == "h":
		setupProjection(0, scope.xy, 1,1,scope.sx/scope.sz) projectUV(0) 
		texture(woodTex(beamTexIdx,"h"))
	else :
		setupProjection(0, scope.xy,1,1,scope.sx/scope.sz) projectUV(0)
		texture(woodTex(beamTexIdx,"v"))



###################################
# Roof Covering with Bricks		
#
	
RoofCovering -->
	case highLOD && GenerateBricks:
		texture(slopedroofTex) 
		set(material.dirtmap,"general/dirtmaps/dirtmap.17.jpg")
		set(material.bumpmap, material.colormap) set(material.bumpValue, 0.8)
		Bricks(scope.sy/nBricksRow)
	case highLOD:
		texture(slopedroofTex) 
		set(material.dirtmap,"general/dirtmaps/dirtmap.17.jpg")
		set(material.bumpmap, material.colormap) set(material.bumpValue, 0.8)
		setupProjection(0,scope.xy,realBrickWidth*11,roofBrickLength*11,0.1,-0.23) 
		setupProjection(2,scope.xy,'1,'1) 
		extrude(world.up, 0.05) 
		projectUV(0) projectUV(2)
	else:
		texture(slopedroofTex) 
		set(material.dirtmap,"general/dirtmaps/dirtmap.17.jpg")
		set(material.bumpmap, material.colormap) set(material.bumpValue, 0.8)
		translate(rel, world, 0, 0.05, 0) 
		setupProjection(0,scope.xy,realBrickWidth*11,roofBrickLength*11,0.1,-0.23) 
		setupProjection(2,scope.xy,'1,'1) 
		projectUV(0) projectUV(2)		

Bricks(realBrickLen) -->
	setupProjection(2,scope.xy,'1,'1) 
	setupProjection(0,scope.xy,realBrickWidth*11,realBrickLen*11,0.1,-0.23)
	split(x,noAdjust){ realBrickWidth: split(y){ realBrickLen : BottomBrick }* }*
	setupProjection(0,scope.xy,realBrickWidth*11,realBrickLen*11,realBrickWidth*0.5,-roofBrickLength*0.32)
	split(x,noAdjust){ realBrickWidth: NIL | { realBrickWidth: split(y){ realBrickLen : TopBrick }* }* }	

BottomBrick -->		
	case geometry.isRectangular(30):
		r(-2.5,0,0)               # rotate the whole tile
		s('0.97,scope.sy+0.05,scope.sx*0.1) center(x)
		r(scopeCenter,0,irr2(5),irr2(3))
		i(bottombrickObj)
		texture(slopedroofTex)
		set(material.bumpmap, material.colormap) set(material.bumpValue, 0.8)
		projectUV(0) projectUV(2)	
	else:
		r(-2.5,0,0)               # rotate the whole tile
		s('0.97,scope.sy+0.05,0) center(x)
		r(scopeCenter,0,irr2(5),irr2(3))
		extrude(scope.sx*0.06)
		set(material.bumpmap, material.colormap) set(material.bumpValue, 0.8)
		projectUV(0) projectUV(2)
	
TopBrick -->
	case split.index == 0: 
		r(-2.5,0,0)               # rotate the whole tile
		s(0.25,'1,0.12) t(-0.125,0,0.03) 
		i(trianglebrickObj) 
		r(scopeCenter,0,irr2(8),irr2(4)) t(0,irr2(0.07),0)
		projectUV(0) projectUV(2)
	else : 
		r(-2.5,0,0)               # rotate the whole tile
		s(0.25,'1.1,0.12) t(-0.125,-0.1,0.03) 
		i(trianglebrickObj) 
		r(scopeCenter,0,irr2(8),irr2(4)) t(0,irr2(0.07),0)
		projectUV(0) projectUV(2)



###################################
# Ridges	
#
	
RidgeBricks -->
	case highLOD :
		s('1,0.3,0) center(y) i(quadXYObj) //translate(rel,world,0,rafterHeight+battenHeight-0.02,0) 
		setupProjection(2,scope.xy,'1,1)
		setupProjection(0,scope.yx,8,scope.sx/rint(scope.sx/roofBrickLength)*11,0,-0.2)
		Plaster texture(slopedroofTex)
		translate(rel,world,0,0.07,0) 
		split(x){ ~roofBrickLength: RidgeBrick }*
	else : NIL
	
RidgeBrick -->
	setPivot(zxy, 4) s('1,'1.05,'1) r(-1.5,0,0)
	r(-irr1(1),irr2(1),irr2(1))
	i(roundbrickObj)
	texture(slopedroofTex) 
	set(material.dirtmap,"general/dirtmaps/dirtmap.17.jpg")
	set(material.bumpmap, material.colormap) set(material.bumpValue, 0.8)
	projectUV(0) projectUV(2)
	
Plaster -->
	s(scope.sx-0.125,scope.sy-0.08,'1) t(0.125,0.04,0)
	extrude(world.up,0.08)
	alignScopeToGeometry(yUp, world.lowest, longest)
	rotateScope(90,0,0)
	setupProjection(0,scope.xz,2,2)
	projectUV(0)
	texture(plasterTexture)



###################################
# Flat roof	
#

FlatRoofTex -->
	setupProjection(0,scope.xy,'1,'1) projectUV(0) 
	t(0,0,0.05) texture(flatroofTex) 
	
	